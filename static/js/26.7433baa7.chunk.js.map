{"version":3,"file":"static/js/26.7433baa7.chunk.js","mappings":"sKACA,MAA4B,0B,UCCfA,EAAS,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACvB,OACE,mBAAQC,UAAWC,EAAeC,KAAK,SAAvC,SACGH,GAGN,C,gKCPD,EAA2B,+BAA3B,EAAiE,2BAAjE,EAAoG,4BAApG,EAAwL,4BAAxL,EAAiO,iCAAjO,EAAiR,mC,UCepQI,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAQC,EAAAA,EAAAA,IAAYC,EAAAA,IACpBC,GAAYF,EAAAA,EAAAA,IAAYG,EAAAA,KAQ9BC,EAAAA,EAAAA,YAAU,WACRP,GAASQ,EAAAA,EAAAA,MACV,GAAE,CAACR,IAEJ,IAQMS,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CC,KAAMF,EAAAA,KAAaG,OAAOC,WAC1BC,MAAOL,EAAAA,KAAaG,OAAOE,QAAQD,WACnCE,SAAUN,EAAAA,KACPO,IAAI,EAAG,+CACPC,IAAI,GAAI,oDACRJ,aAGL,OACE,iBAAKlB,UAAWC,EAAhB,WACE,sCACA,SAAC,KAAD,CACEsB,cA/BqB,CACzBP,KAAM,GACNG,MAAO,GACPC,SAAU,IA6BNP,iBAAkBA,EAClBW,SAvBW,SAACC,EAAQC,GACxBC,QAAQC,IAAIH,GACZE,QAAQC,IAAIF,GACZtB,GAASyB,EAAAA,EAAAA,IAASJ,IAClBC,EAAQI,WACT,EAeG,SAKG,gBAAGC,EAAH,EAAGA,aAAH,OACC,UAAC,KAAD,CACE/B,UAAWC,EACXuB,SAAUO,EACVf,KAAK,gBACLgB,aAAa,MAJf,WAME,mBAAOhC,UAAWC,EAAlB,sBAEE,SAAC,KAAD,CACED,UAAWC,EACXC,KAAK,OACLc,KAAK,OACLE,UAAQ,EACRe,WAAS,EACTC,YAAY,OAGd,SAAC,KAAD,CACElB,KAAK,OACLmB,UAAU,IACVnC,UAAWC,QAGf,mBAAOD,UAAWC,EAAlB,mBAEE,SAAC,KAAD,CACED,UAAWC,EACXC,KAAK,QACLc,KAAK,QACLE,UAAQ,EACRgB,YAAY,OAEd,SAAC,KAAD,CACElB,KAAK,QACLmB,UAAU,IACVnC,UAAWC,QAGf,mBAAOD,UAAWC,EAAlB,sBAEE,SAAC,KAAD,CACED,UAAWC,EACXC,KAAK,WACLc,KAAK,WACLoB,UAAU,IACVC,UAAU,KACVH,YAAY,IACZhB,UAAQ,KAEV,SAAC,KAAD,CACEF,KAAK,WACLmB,UAAU,IACVnC,UAAWC,QAGf,SAACH,EAAA,EAAD,yBAxDH,IA6DFW,IAAcH,IAAS,SAAC,IAAD,CAAWgC,MAAM,UAAUC,MAAM,SAExDjC,IACC,cAAGN,UAAWC,EAAd,0EAMP,ECpHD,EARiB,WACf,OACE,8BACE,SAACE,EAAD,KAGL,C","sources":["webpack://react-homework-template/./src/components/Button/Button.module.css?ce6f","components/Button/Button.jsx","webpack://react-homework-template/./src/components/RegisterForm/RegisterForm.module.css?a5d4","components/RegisterForm/RegisterForm.jsx","pages/Register.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"submitBtn\":\"Button_submitBtn__Xtf41\"};","import css from './Button.module.css';\n\nexport const Button = ({ children }) => {\n  return (\n    <button className={css.submitBtn} type=\"submit\">\n      {children}\n    </button>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"formCard\":\"RegisterForm_formCard__ngnn0\",\"form\":\"RegisterForm_form__Tv43W\",\"label\":\"RegisterForm_label__4pTXF\",\"description\":\"RegisterForm_description__GEFx4\",\"input\":\"RegisterForm_input__FsgBz\",\"inputError\":\"RegisterForm_inputError__c6zsh\",\"ErrorMessage\":\"RegisterForm_ErrorMessage__kTaPZ\"};","// React/redux\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { register } from 'redux/auth/auth-operations';\n// Validation\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n// Components\nimport { Button } from 'components/Button/Button';\nimport { reLogIn } from 'redux/auth/auth-operations';\nimport BarLoader from 'react-spinners/BarLoader';\nimport { selectError } from 'redux/auth/auth-selectors';\nimport { selectIsLoading } from 'redux/auth/auth-selectors';\n// Styles\nimport css from './RegisterForm.module.css';\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n  const error = useSelector(selectError);\n  const isLoading = useSelector(selectIsLoading);\n  // початковий стан для formik\n  const formikInitialValue = {\n    name: '',\n    email: '',\n    password: '',\n  };\n\n  useEffect(() => {\n    dispatch(reLogIn());\n  }, [dispatch]);\n\n  const onSubmit = (values, actions) => {\n    console.log(values);\n    console.log(actions);\n    dispatch(register(values));\n    actions.resetForm();\n  };\n\n  // Валідація\n  const validationSchema = Yup.object().shape({\n    name: Yup.string().trim().required(),\n    email: Yup.string().trim().email().required(),\n    password: Yup.string()\n      .min(7, 'Password must contain at least 7 characters')\n      .max(16, 'Password must contain no more than 16 characters')\n      .required(),\n  });\n\n  return (\n    <div className={css.formCard}>\n      <h2>Register</h2>\n      <Formik\n        initialValues={formikInitialValue}\n        validationSchema={validationSchema}\n        onSubmit={onSubmit}\n      >\n        {({ handleSubmit }) => (\n          <Form\n            className={css.form}\n            onSubmit={handleSubmit}\n            name=\"register_form\"\n            autoComplete=\"off\"\n          >\n            <label className={css.label}>\n              Username\n              <Field\n                className={css.input}\n                type=\"text\"\n                name=\"name\"\n                required\n                autoFocus\n                placeholder=\" \"\n                // pattern=\"^[a-zA-Z]+\\s[a-zA-Z]+$\"\n              />\n              <ErrorMessage\n                name=\"name\"\n                component=\"p\"\n                className={css.inputError}\n              />\n            </label>\n            <label className={css.label}>\n              Email\n              <Field\n                className={css.input}\n                type=\"email\"\n                name=\"email\"\n                required\n                placeholder=\" \"\n              />\n              <ErrorMessage\n                name=\"email\"\n                component=\"p\"\n                className={css.inputError}\n              />\n            </label>\n            <label className={css.label}>\n              Password\n              <Field\n                className={css.input}\n                type=\"password\"\n                name=\"password\"\n                minLength=\"7\"\n                maxLength=\"16\"\n                placeholder=\" \"\n                required\n              />\n              <ErrorMessage\n                name=\"password\"\n                component=\"p\"\n                className={css.inputError}\n              />\n            </label>\n            <Button>Register</Button>\n          </Form>\n        )}\n      </Formik>\n\n      {isLoading && !error && <BarLoader color=\"#5ac846\" width=\"100%\" />}\n\n      {error && (\n        <p className={css.ErrorMessage}>\n          Error, this email address is invalid or already registered\n        </p>\n      )}\n    </div>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\nconst Register = () => {\n  return (\n    <section>\n      <RegisterForm />\n    </section>\n  );\n};\n\nexport default Register;\n"],"names":["Button","children","className","css","type","RegisterForm","dispatch","useDispatch","error","useSelector","selectError","isLoading","selectIsLoading","useEffect","reLogIn","validationSchema","Yup","shape","name","trim","required","email","password","min","max","initialValues","onSubmit","values","actions","console","log","register","resetForm","handleSubmit","autoComplete","autoFocus","placeholder","component","minLength","maxLength","color","width"],"sourceRoot":""}